[개념]
자료의 가운데에 있는 항목의 키 값과 비교하여 다음 검색의 위치를 결정하고 검색을 계속 진행하는 방법.
목적 키를 찾을 때까지 이분탐색을 순환적으로 반복 수행함으로써 검색 범위를 반으로 줄여가면서 보다 빠르게 검색을 수행함.  
이전 검색을 하기 위해서는 자료가 정렬된 상태여야 함.

[검색 과정]
1. 자료의 중앙에 있는 원소를 고른다.
2. 중앙 원소의 값과 찾고자 하는 목표 값을 비교한다.
3-1. 목표 값이 중앙 원소의 값보다 작으면 자료의 왼쪽 반에 대해서 새로 검색을 수행하고,
3-2. 목표 값이 중앙 원소의 값보다 크다면 자료의 오른쪽 반에 대해서 새로 검색을 수행한다.
4. 찾고자 하는 값을 찾을 때까지 1~3의 과정을 반복한다.

[구현 - 반복문]
검색 범위의 시작점과 종료점을 이용하여 검색을 반복 수행한다.
이진 검색의 경우, 자료에 삽입이나 삭제가 발생했을 때 배열의 상태를 항상 정렬 상태로 유지하는 추가 작업이 필요.
(의사코드)
binarySearch(int[] a, int key)
  start <- 0;
  end <- length(a)-1;
  while (start <= end){
    middle = (start + end)/2; 
    if (a[middle] == key) return true; //검색 성공
    else if (a[middle] > key) end = middle-1; //왼쪽 다시 탐색
    else start = middle+1; //오른쪽 다시 탐색
  }
  return false; //검색 실패

[구현 - 재귀함수]
binarySearch(int[] a, int low, int high, int key)
  if (low > high) return false; //검색 실패

  middle = (start + end)/2;
  if (key = a[middle]) return true; //검색 성공
  else if (key < a[middle]) return binarySearch(a, low, middle-1, key) //왼쪽 다시 탐색
  else if (key > a[middle]) return binarySearch(a, middle+1, high, key) //오른쪽 다시 탐색
