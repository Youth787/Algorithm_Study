import java.util.Scanner;

public class bj2294 {
    static int n, k;
    static int[] coin;
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        n = sc.nextInt();
        k = sc.nextInt();
        coin = new int[n + 1]; // 동전 가격 받아올 배열 -> 인덱스 0은 안쓸거에요
        for (int i = 1; i <= n; i++) {
            coin[i] = sc.nextInt(); // 동전 가격 받아오기
        }
        int[] dp = new int[k + 1]; // dp배열 생성 -> 마찬가지로 인덱스0 안씀
        for (int i = 1; i <= k; i++) {
            dp[i] = Integer.MAX_VALUE - 1; // 최대값으로 초기화하기
        }
        //dp는 (index)의 가격이 코인 몇개를 가지고 만들수 있는지를 담을 배열입니다.
        // 즉. dp[5]라면 5라는 가격이 코인 몇개를 가지고 만들 수 있는지의 최소값을 담을 배열이라는 뜻!
        for (int i = 1; i <= n; i++) {
            for (int j = coin[i]; j <= k; j++) {
                dp[j] = Math.min(dp[j], dp[j - coin[i]] + 1);
            }
        }
        if (dp[k] == Integer.MAX_VALUE - 1) System.out.println(-1);
        else System.out.println(dp[k]);
    }
}

//그런데 왜 Integer.MAX_VALUE에서 1을 빼주는지 이해를 못하겠음. 
// => dp[j - coin[i]] + 1을 할때 인티저의 최대값보다 1커질수 있는 위험이 있으니까 -1를 해주는게 맞다!!!!

//dp는 아이디어 싸움!!!! 규칙을 잘 찾아서 점화식을 잘 세워보자!!
//참고블로그: https://stonejjun.tistory.com/48
//문제 풀이: https://velog.io/@sungjin0757/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EB%B0%B1%EC%A4%80-2294%EB%B2%88-%EB%8F%99%EC%A0%842-JAVA
