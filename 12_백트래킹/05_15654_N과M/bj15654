import java.io.*;
import java.util.StringTokenizer;
import java.util.Arrays;

public class bj15654 {

    static int n, m;
    static int[] ans, nums;
    static boolean[] visited; // 방문쳌 해야해요
    static BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));


    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        n = Integer.parseInt(st.nextToken());
        m = Integer.parseInt(st.nextToken());
        nums = new int[n + 1];
        st = new StringTokenizer(br.readLine());
        for (int i = 1; i <= n; i++) {
            nums[i] = Integer.parseInt(st.nextToken());
        }
        Arrays.sort(nums); // 받아온 숫자들 오름차순 정렬해주기!!!!!!!
        ans = new int[m + 1];
        visited = new boolean[n + 1];

        solve(0);
        bw.flush();
        bw.close();

    }
    static void solve(int count) throws IOException {
        if (count > m) return;
        if (count == m) { // 뽑은 숫자가 m이랑 같으면 진행시키자
            for (int i = 1; i <= m; i++) { // ans 출력하기
                bw.write(ans[i] + " ");
            }
            bw.write("\n");
            return;
        }

        for (int i = 1; i <= n; i++) {
            if (!visited[i]) { // 숫자 방문 안했어?
                visited[i] = true; // 그럼 방문체크해주고
                ans[count + 1] = nums[i]; // 정답 배열에 nums[i]넣어주자. ( 오름차순 정렬 했으니 괜찮아 )
                solve(count + 1); // 하나 뽑았으니까 count+1해주고 다시 재귀함수 돌기
                visited[i] = false; // 다 돌았으면 방문처리 지워주기
            }
        }

    }
}
